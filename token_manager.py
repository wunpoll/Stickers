# token_manager.py
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä Bearer-—Ç–æ–∫–µ–Ω–æ–≤.

–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (python token_manager.py), –∏ –æ–Ω –±—É–¥–µ—Ç
–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å payload –∏–∑ Telegram –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å Bearer-—Ç–æ–∫–µ–Ω
–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.

–î—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏, –∫–∞–∫ –∏ –ø—Ä–µ–∂–¥–µ, –º–æ–≥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å get_bearer()
–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
"""
from __future__ import annotations

import asyncio
import sys
import time
from pathlib import Path
from urllib.parse import parse_qs, unquote

import requests
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import RequestWebViewRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
try:
    import config
except ImportError:
    print("üö® –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–≤ –∏–∑ config.py.example")
    sys.exit(1)


# --- API details -----------------------------------------------------------
AUTH_URL = "https://api.stickerdom.store/api/v1/auth"
TOKEN_TXT = Path(__file__).with_name("bearer_token.txt")
REFRESH_EVERY = 30 * 2   # 30 –º–∏–Ω—É—Ç

# --- Bot Configuration -----------------------------------------------------
BOT_USERNAME = "sticker_bot"  # –ü—É–±–ª–∏—á–Ω–æ–µ @username –±–æ—Ç–∞
WEB_APP_URL = "https://app.stickerdom.store/"


# --------------------------------------------------7910-------------------------
# Public helpers
# ---------------------------------------------------------------------------

def get_bearer() -> str:
    """Return the last cached Bearer-token (without the leading "Bearer ")."""
    try:
        return TOKEN_TXT.read_text().strip()
    except FileNotFoundError as exc:
        raise RuntimeError(
            "Bearer-—Ç–æ–∫–µ–Ω –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ token_manager.py –ª–∏–±–æ "
            "–¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–≤–æ–π –≤—ã–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞."
        ) from exc


# ---------------------------------------------------------------------------
# Internal helpers used by the background worker
# ---------------------------------------------------------------------------

async def _fetch_token(tg_client: TelegramClient) -> None:
    """
    1. –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (payload) —á–µ—Ä–µ–∑ Telethon.
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä StickerDom –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Bearer-—Ç–æ–∫–µ–Ω–∞.
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª.
    """
    print("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Web App —É Telegram...")
    bot_entity = await tg_client.get_entity(BOT_USERNAME)
    result = await tg_client(RequestWebViewRequest(
        peer=bot_entity,
        bot=bot_entity,
        platform="web",
        url=WEB_APP_URL,
    ))
    
    # –ù–∞–º –Ω—É–∂–µ–Ω –ò–ú–ï–ù–ù–û –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload (–ø—Ä–æ—Ü–µ–Ω—Ç-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è),
    # –∏–Ω–∞—á–µ –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π. –ë–µ—Ä—ë–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ URL –±–µ–∑ decode.
    fragment = result.url.split('#', 1)[1]  # —á–∞—Å—Ç—å –ø–æ—Å–ª–µ #
    for part in fragment.split('&'):
        if part.startswith('tgWebAppData='):
            body_payload_encoded = part[len('tgWebAppData='):]
            break
    else:
        raise RuntimeError('tgWebAppData not found in URL fragment')

    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–π–¥—ë—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.
    # decoded_debug = unquote(body_payload_encoded)
    # print('DEBUG decoded payload:', decoded_debug)
    body_payload_once = unquote(body_payload_encoded)
            
    body_payload_bytes = body_payload_once.encode('utf-8')

    print("Payload –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—Ä–æ—Å Bearer-—Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é `requests`...")
    print(body_payload_once)
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
        "Origin": "https://app.stickerdom.store",
        "Referer": "https://app.stickerdom.store/",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
    }
    
    # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å asyncio ---
    def do_request():
        # requests –æ–∂–∏–¥–∞–µ—Ç –±–∞–π—Ç—ã –¥–ª—è raw data —Å Content-Type: x-www-form-urlencoded
        return requests.post(AUTH_URL, data=body_payload_bytes, headers=headers)

    resp = await asyncio.to_thread(do_request)
    
    try:
        data = resp.json()
    except requests.exceptions.JSONDecodeError:
        raise RuntimeError(f"Non-JSON response ({resp.status_code} {resp.reason}):\n{resp.text[:300]}")
    
    if resp.status_code != 200 or not data.get("ok"):
        raise RuntimeError(f"Auth failed ({resp.status_code}): {data}")
    
    token = data["data"]
    TOKEN_TXT.write_text(token)
    print(f"[{time.strftime('%H:%M:%S')}] ‚úÖ Bearer token refreshed")


async def _worker() -> None:
    if config.API_ID == 123 or not config.API_HASH:
        print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫—Ä–æ–π—Ç–µ config.py –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ API_ID –∏ API_HASH.")
        return

    async with TelegramClient(config.SESSION_NAME, config.API_ID, config.API_HASH) as tg_client:
        me = await tg_client.get_me()
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram –∫–∞–∫: {me.first_name}")
        
        while True:
            try:
                await _fetch_token(tg_client)
            except Exception as exc:
                print(f"‚ùå Token refresh error: {exc}")
            
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ {REFRESH_EVERY // 60} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
            await asyncio.sleep(REFRESH_EVERY)


# ---------------------------------------------------------------------------
# Convenience API for running the refresh loop in the background
# ---------------------------------------------------------------------------

def start_background_refresh(loop: asyncio.AbstractEventLoop | None = None) -> None:
    """Spawn the refresh worker as a background task inside *loop*."""
    loop = loop or asyncio.get_event_loop()
    loop.create_task(_worker())


# ---------------------------------------------------------------------------
# CLI entry-point
# ---------------------------------------------------------------------------

if __name__ == "__main__":
    try:
        asyncio.run(_worker())
    except KeyboardInterrupt:
        print("\n‚èπ  Token refresh stopped by user") 